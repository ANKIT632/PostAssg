## Installation
### for frontend (command)
cd frontend
npm i
npm run dev 


###for backend (command)
cd servern
npm i
npm run start


### NOte :
- I have already implemented a cloud MongoDB instance, there is no need to set up a local MongoDB instance .

- email : ankit@gmail.com
- password : 12345  
-* You can use the provided email and password to test the application without creating your own account.



### Backend

- **Technologies Used**: 
  - Node.js
  - Express
  - MongoDB
  - JWT for authentication
  - Mongoose for MongoDB object modeling
  - cors
  - validator
  - body-parser
  - bcrypt

### Frontend

- **Technologies Used**: 
  - React
  - tailwind CSS
  - motion
  - Axios for API requests
  - React Router for navigation
  - react icon
  - jwt-decode




## API Documentation

### User Routes

- base url : http://localhost:5000

- `POST /api/users/signup`
  - signup a new user.
  - **Request Body**: `{ "username": "string","email": "string", "password": "string" }`

- `POST /api/users/login`
  - Authenticates a user and returns a token.
  - **Request Body**: `{ "username": "string", "password": "string" }`

### Post Routes

- `GET /api/posts`
  - Retrieves all posts.
  - **Headers**: `{ "Authorization": "Bearer <token>" }`
  - **Query Parameters**:
    - `page`: Page number (optional, default is 1)
    - `limit`

- `POST /api/posts`
  - Creates a new post.
  - **Headers**: `{ "Authorization": "Bearer <token>" }`
  - **Request Body**: `{ "title": "string", "content": "string" }`

 `PUT /api/posts/:id`
  - Updates an existing post by ID.
  - **Headers**: `{ "Authorization": "Bearer <token>" }`
  - **Request Body**: `{ "title": "string", "content": "string" }`

- `DELETE /api/posts/:id`
  - Deletes a post by ID.
  - **Headers**: `{ "Authorization": "Bearer <token>" }`
